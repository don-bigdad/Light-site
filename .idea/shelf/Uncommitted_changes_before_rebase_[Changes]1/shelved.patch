Index: Light/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nDjango settings for Light project.\r\n\r\nGenerated by 'django-admin startproject' using Django 4.1.\r\n\r\nFor more information on this file, see\r\nhttps://docs.djangoproject.com/en/4.1/topics/settings/\r\n\r\nFor the full list of settings and their values, see\r\nhttps://docs.djangoproject.com/en/4.1/ref/settings/\r\n\"\"\"\r\nimport os.path\r\nfrom pathlib import Path\r\n\r\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\r\n\r\nBASE_DIR = Path(__file__).resolve().parent.parent\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'django-insecure-my24_b(=m795c88qi-v40s(k**hjeozgww$7z@yq+x#y$#hl!g'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'manager.apps.ManagerConfig',\r\n    'base.apps.BaseConfig',\r\n    'account.apps.AccountConfig',\r\n    'cart.apps.CartConfig',\r\n]\r\n\r\nMIDDLEWARE = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'Light.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [BASE_DIR / 'templates']\r\n        ,\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'Light.wsgi.application'\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': BASE_DIR / 'db.sqlite3',\r\n    }\r\n}\r\n\r\n\r\n# Password validation\r\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\r\n\r\nSTATIC_URL = 'static/'\r\nSTATIC_ROOT = os.path.join(BASE_DIR,\"staticfiles\")\r\n\r\nSTATICFILES_DIRS = (\r\n    os.path.join(BASE_DIR,\"static\"),\r\n)\r\nMEDIA_URL = \"media/\"\r\nMEDIA_ROOT = os.path.join(BASE_DIR,\"media/\")\r\n\r\n# Default primary key field type\r\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\r\n\r\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\r\n\r\nCART_SESSION_ID = \"cart\"\r\n\r\nEMAIL_HOST = \"smtp.ukr.net\"\r\nEMAIL_HOST_USER = \"walter_white.2002@ukr.net\"\r\nEMAIL_HOST_PASSWORD = \"qUhGOGD60WlTTbwy\"\r\nEMAIL_PORT = 465\r\nEMAIL_USE_TLS = False\r\nEMAIL_USE_SSL = True\r\n\r\nFROM_EMAIL = \"Light_shop@gmail.com\"\r\nEMAIL_ADMIN = \"bogdan.maksimenko.2002@gmail.com\"\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Light/settings.py b/Light/settings.py
--- a/Light/settings.py	(revision 2b045c5a13e65fdcbe6b817447d322a5a53756a8)
+++ b/Light/settings.py	(date 1667250964084)
@@ -10,6 +10,7 @@
 https://docs.djangoproject.com/en/4.1/ref/settings/
 """
 import os.path
+import dj_database_url
 from pathlib import Path
 
 # Build paths inside the project like this: BASE_DIR / 'subdir'.
@@ -21,7 +22,13 @@
 # See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/
 
 # SECURITY WARNING: keep the secret key used in production secret!
-SECRET_KEY = 'django-insecure-my24_b(=m795c88qi-v40s(k**hjeozgww$7z@yq+x#y$#hl!g'
+SECRET_KEY = os.environ.get('SECRET_KEY')
+
+DB_NAME = os.environ.get('DB_NAME')
+DB_USER = os.environ.get('DB_USER')
+DB_PASSWORD = os.environ.get('DB_PASSWORD')
+DB_HOST = os.environ.get('DB_HOST')
+DB_PORT = os.environ.get('DB_PORT') or '5432'
 
 # SECURITY WARNING: don't run with debug turned on in production!
 DEBUG = True
@@ -45,6 +52,7 @@
 ]
 
 MIDDLEWARE = [
+    'whitenoise.middleware.WhiteNoiseMiddleware',
     'django.middleware.security.SecurityMiddleware',
     'django.contrib.sessions.middleware.SessionMiddleware',
     'django.middleware.common.CommonMiddleware',
@@ -79,13 +87,26 @@
 # Database
 # https://docs.djangoproject.com/en/4.1/ref/settings/#databases
 
+# DATABASES = {
+#     'default': {
+#         'ENGINE': 'django.db.backends.sqlite3',
+#         'NAME': BASE_DIR / 'db.sqlite3',
+#     }
+# }
+
 DATABASES = {
     'default': {
-        'ENGINE': 'django.db.backends.sqlite3',
-        'NAME': BASE_DIR / 'db.sqlite3',
+        'ENGINE': 'django.db.backends.postgresql',
+        'NAME': DB_NAME,
+        'USER': DB_USER,
+        'PASSWORD': DB_PASSWORD,
+        'HOST': DB_HOST,
+        'PORT': DB_PORT,
     }
 }
 
+db = dj_database_url.config()
+DATABASES['default'].update(db)
 
 # Password validation
 # https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
Index: Light/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"Light URL Configuration\r\n\r\nThe `urlpatterns` list routes URLs to views. For more information please see:\r\n    https://docs.djangoproject.com/en/4.1/topics/http/urls/\r\nExamples:\r\nFunction views\r\n    1. Add an import:  from my_app import views\r\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\r\nClass-based views\r\n    1. Add an import:  from other_app.views import Home\r\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\r\nIncluding another URLconf\r\n    1. Import the include() function: from django.urls import include, path\r\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\r\n\"\"\"\r\nfrom django.contrib import admin\r\nfrom django.urls import path,include\r\nfrom base.views import base\r\nfrom django.conf import settings\r\nfrom django.conf.urls.static import static\r\n\r\n\r\n\r\nurlpatterns = [\r\n    path('admin/', admin.site.urls),\r\n    path(\"account/\",include(\"account.urls\")),\r\n    path(\"cart/\",include(\"cart.urls\")),\r\n    path('',base),\r\n    path(\"manager/\",include(\"manager.urls\")),\r\n]\r\n\r\nif settings.DEBUG:\r\n    urlpatterns += static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Light/urls.py b/Light/urls.py
--- a/Light/urls.py	(revision 2b045c5a13e65fdcbe6b817447d322a5a53756a8)
+++ b/Light/urls.py	(date 1667250964093)
@@ -14,20 +14,18 @@
     2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
 """
 from django.contrib import admin
-from django.urls import path,include
+from django.urls import path, include
 from base.views import base
 from django.conf import settings
 from django.conf.urls.static import static
 
-
-
 urlpatterns = [
     path('admin/', admin.site.urls),
-    path("account/",include("account.urls")),
-    path("cart/",include("cart.urls")),
-    path('',base),
-    path("manager/",include("manager.urls")),
+    path("account/", include("account.urls")),
+    path("cart/", include("cart.urls")),
+    path('', base),
+    path("manager/", include("manager.urls")),
 ]
 
 if settings.DEBUG:
-    urlpatterns += static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)
\ No newline at end of file
+    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
Index: base/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.core.validators import RegexValidator\r\nfrom django.db import models\r\nfrom django.urls import reverse\r\n\r\n\r\nclass SaleItem(models.Model):\r\n    name = models.CharField(unique=True,max_length=70,db_index=True)\r\n    slug = models.SlugField(max_length=100, db_index=True)\r\n    small_description = models.TextField(max_length=140,blank=True)\r\n    past_price = models.DecimalField(max_digits=10,decimal_places=2)\r\n    new_price = models.DecimalField(max_digits=10,decimal_places=2)\r\n    is_visible = models.BooleanField(default=True)\r\n    position = models.IntegerField(unique=True)\r\n    picture = models.ImageField(upload_to=\"sale/%Y-%m-%d\")\r\n\r\n    def get_absolute_url(self):\r\n        return reverse(\"about_sale_product\", args=[self.slug,])\r\n\r\n    @property\r\n    def sale_percent_auto_calculate(self):\r\n        return 100 - self.new_price * 100 // self.past_price\r\n\r\n\r\n\r\n    class Meta:\r\n        ordering = (\"position\",\"new_price\",)\r\n        index_together = ((\"id\", \"slug\"),)\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\n\r\nclass Category(models.Model):\r\n    name = models.CharField(max_length=40,unique=True,db_index=True)\r\n    position = models.SmallIntegerField()\r\n    is_visible = models.BooleanField(default=True)\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\nclass Product(models.Model):\r\n\r\n    name = models.CharField(unique=True, max_length=70, db_index=True)\r\n    slug = models.SlugField(max_length=140,db_index=True)\r\n    small_description = models.TextField(max_length=140,blank=True)\r\n    price = models.DecimalField(max_digits=10, decimal_places=2)\r\n    is_visible = models.BooleanField(default=True)\r\n    picture = models.ImageField(upload_to=\"product/%Y-%m-%d\")\r\n    category = models.ForeignKey(Category,on_delete=models.CASCADE)\r\n\r\n    def get_absolute_url(self):\r\n        return reverse(\"about_product\", args=[self.id, self.slug])\r\n\r\n    class Meta:\r\n        ordering = (\"name\",)\r\n        index_together = ((\"id\",\"slug\"),)\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\n\r\nclass UserForm(models.Model):\r\n\r\n    mobile_re = RegexValidator(regex=r\"^(\\d{3}[- .]?){2}\\d{4}$\",message=\"Input number in format xxx xxx xxxx\")\r\n\r\n    name = models.CharField(max_length=40,db_index=True)\r\n    phone = models.CharField(max_length=15,validators=[mobile_re,])\r\n    date = models.DateField(blank=True)\r\n    time = models.TimeField(blank=True)\r\n    text = models.TextField(max_length=500,blank=True)\r\n    is_processed = models.BooleanField(default=False)\r\n\r\n    class Meta:\r\n        ordering = (\"time\",)\r\n\r\n    def __str__(self):\r\n        return self.name + \"-\" + str(self.date)\r\n\r\nclass Mailing(models.Model):\r\n    email = models.EmailField()\r\n    mailing_start_date = models.DateTimeField(auto_now=True)\r\n\r\n\r\n    def __str__(self):\r\n        return self.email
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/base/models.py b/base/models.py
--- a/base/models.py	(revision 2b045c5a13e65fdcbe6b817447d322a5a53756a8)
+++ b/base/models.py	(date 1667250964117)
@@ -4,26 +4,24 @@
 
 
 class SaleItem(models.Model):
-    name = models.CharField(unique=True,max_length=70,db_index=True)
+    name = models.CharField(unique=True, max_length=70, db_index=True)
     slug = models.SlugField(max_length=100, db_index=True)
-    small_description = models.TextField(max_length=140,blank=True)
-    past_price = models.DecimalField(max_digits=10,decimal_places=2)
-    new_price = models.DecimalField(max_digits=10,decimal_places=2)
+    small_description = models.TextField(max_length=140, blank=True)
+    past_price = models.DecimalField(max_digits=10, decimal_places=2)
+    new_price = models.DecimalField(max_digits=10, decimal_places=2)
     is_visible = models.BooleanField(default=True)
     position = models.IntegerField(unique=True)
     picture = models.ImageField(upload_to="sale/%Y-%m-%d")
 
     def get_absolute_url(self):
-        return reverse("about_sale_product", args=[self.slug,])
+        return reverse("about_sale_product", args=[self.slug, ])
 
     @property
     def sale_percent_auto_calculate(self):
         return 100 - self.new_price * 100 // self.past_price
 
-
-
     class Meta:
-        ordering = ("position","new_price",)
+        ordering = ("position", "new_price",)
         index_together = (("id", "slug"),)
 
     def __str__(self):
@@ -31,43 +29,42 @@
 
 
 class Category(models.Model):
-    name = models.CharField(max_length=40,unique=True,db_index=True)
+    name = models.CharField(max_length=40, unique=True, db_index=True)
     position = models.SmallIntegerField()
     is_visible = models.BooleanField(default=True)
 
     def __str__(self):
         return self.name
 
+
 class Product(models.Model):
-
     name = models.CharField(unique=True, max_length=70, db_index=True)
-    slug = models.SlugField(max_length=140,db_index=True)
-    small_description = models.TextField(max_length=140,blank=True)
+    slug = models.SlugField(max_length=140, db_index=True)
+    small_description = models.TextField(max_length=140, blank=True)
     price = models.DecimalField(max_digits=10, decimal_places=2)
     is_visible = models.BooleanField(default=True)
     picture = models.ImageField(upload_to="product/%Y-%m-%d")
-    category = models.ForeignKey(Category,on_delete=models.CASCADE)
+    category = models.ForeignKey(Category, on_delete=models.CASCADE)
 
     def get_absolute_url(self):
         return reverse("about_product", args=[self.id, self.slug])
 
     class Meta:
         ordering = ("name",)
-        index_together = (("id","slug"),)
+        index_together = (("id", "slug"),)
 
     def __str__(self):
         return self.name
 
 
 class UserForm(models.Model):
-
-    mobile_re = RegexValidator(regex=r"^(\d{3}[- .]?){2}\d{4}$",message="Input number in format xxx xxx xxxx")
+    mobile_re = RegexValidator(regex=r"^(\d{3}[- .]?){2}\d{4}$", message="Input number in format xxx xxx xxxx")
 
-    name = models.CharField(max_length=40,db_index=True)
-    phone = models.CharField(max_length=15,validators=[mobile_re,])
+    name = models.CharField(max_length=40, db_index=True)
+    phone = models.CharField(max_length=15, validators=[mobile_re, ])
     date = models.DateField(blank=True)
     time = models.TimeField(blank=True)
-    text = models.TextField(max_length=500,blank=True)
+    text = models.TextField(max_length=500, blank=True)
     is_processed = models.BooleanField(default=False)
 
     class Meta:
@@ -76,10 +73,10 @@
     def __str__(self):
         return self.name + "-" + str(self.date)
 
+
 class Mailing(models.Model):
     email = models.EmailField()
     mailing_start_date = models.DateTimeField(auto_now=True)
 
-
     def __str__(self):
-        return self.email
\ No newline at end of file
+        return self.email
Index: account/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/account/models.py b/account/models.py
--- a/account/models.py	(revision 2b045c5a13e65fdcbe6b817447d322a5a53756a8)
+++ b/account/models.py	(date 1667250964124)
@@ -1,3 +1,1 @@
-from django.db import models
-
 
Index: base/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.core.mail import send_mail\r\nfrom django.shortcuts import render, redirect\r\n\r\nfrom Light.settings import EMAIL_HOST_USER\r\nfrom cart.cart import Cart\r\nfrom .models import *\r\nfrom .forms import UserFormQuestion, MailingForm\r\n\r\nfrom django.core.paginator import Paginator\r\n\r\ndef base(request):\r\n    mailing = MailingForm(request.POST)\r\n    if request.method == \"POST\":\r\n        message = UserFormQuestion(request.POST)\r\n        if message.is_valid():\r\n            message.save()\r\n            return redirect(\"/\")\r\n        if mailing:\r\n            mailing.save()\r\n            send_mail(\"Light magazine\",\"You have successfully subscribed to our news\", EMAIL_HOST_USER,\r\n                      [request.POST.get(\"email\")], fail_silently=False)\r\n\r\n        return redirect(\"/\")\r\n\r\n    category = Category.objects.filter(is_visible=True)\r\n\r\n\r\n    product = Product.objects.filter(is_visible=True)\r\n\r\n    p = Paginator(product,50)\r\n    page = request.GET.get(\"page\")\r\n    prod_list = p.get_page(page)\r\n\r\n    cart = Cart(request)\r\n\r\n    sale_item = SaleItem.objects.filter(is_visible=True)\r\n    form = UserFormQuestion()\r\n\r\n    data = {\r\n        \"categories\":category,\r\n        \"product\":product,\r\n        \"prod_list\":prod_list,\r\n        \"sale_item\":sale_item,\r\n        \"form\":form,\r\n        \"mailing\":mailing,\r\n        \"cart\":cart,\r\n    }\r\n\r\n    return render(request,\"base.html\",context=data)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/base/views.py b/base/views.py
--- a/base/views.py	(revision 2b045c5a13e65fdcbe6b817447d322a5a53756a8)
+++ b/base/views.py	(date 1667250964131)
@@ -8,6 +8,7 @@
 
 from django.core.paginator import Paginator
 
+
 def base(request):
     mailing = MailingForm(request.POST)
     if request.method == "POST":
@@ -17,17 +18,16 @@
             return redirect("/")
         if mailing:
             mailing.save()
-            send_mail("Light magazine","You have successfully subscribed to our news", EMAIL_HOST_USER,
+            send_mail("Light magazine", "You have successfully subscribed to our news", EMAIL_HOST_USER,
                       [request.POST.get("email")], fail_silently=False)
 
         return redirect("/")
 
     category = Category.objects.filter(is_visible=True)
 
-
     product = Product.objects.filter(is_visible=True)
 
-    p = Paginator(product,50)
+    p = Paginator(product, 50)
     page = request.GET.get("page")
     prod_list = p.get_page(page)
 
@@ -37,14 +37,13 @@
     form = UserFormQuestion()
 
     data = {
-        "categories":category,
-        "product":product,
-        "prod_list":prod_list,
-        "sale_item":sale_item,
-        "form":form,
-        "mailing":mailing,
-        "cart":cart,
+        "categories": category,
+        "product": product,
+        "prod_list": prod_list,
+        "sale_item": sale_item,
+        "form": form,
+        "mailing": mailing,
+        "cart": cart,
     }
 
-    return render(request,"base.html",context=data)
-
+    return render(request, "base.html", context=data)
Index: base/templates/product.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n{% load static %}\r\n\r\n <section class=\"product\" id=\"Product\">\r\n      <div style=\"height:70px;margin-top:20px;\"></div>\r\n      <div class=\"container text-center header-transparent\">\r\n        <h2>Our Product</h2>\r\n        <ul class=\"Itempicker\">\r\n        <li class=\"list active PickCategory\" data-filter=\"all\">All</li>\r\n            {% for category in categories %}\r\n                <li class=\"list PickCategory\" data-filter=\"{{ category.name }}\">{{ category.name }}</li>\r\n            {% endfor %}\r\n        </ul>\r\n      </div>\r\n        <div style=\"display: flex;justify-content: center;align-items: center;flex-wrap: wrap;text-align: center\">\r\n             {% for item in prod_list %}\r\n          <div class=\"card item\" data-item=\"{{item.category.name}}\">\r\n             <img src= {{ item.picture.url }} class=\"card-img-top\" alt=\"Desk lamp\">\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">{{item.name}}</h5>\r\n            <p class=\"card-text\">{{ item.small_description}}</p>\r\n            <a href=\"{% url \"cart:cart_add\" item.id %}\" class=\"btn btn-warning price\">Add to cart</a>\r\n            <a class=\"btn btn-primary\">{{ item.price }}$</a>\r\n          </div>\r\n        </div>\r\n         {% endfor %}\r\n        </div>\r\n\r\n<nav aria-label=\"Page navigation example \">\r\n  <ul class=\"pagination\">\r\n       {% if prod_list.has_previous %}\r\n           <li class=\"page-item\"> <a class=\"page-link\" href=\"?page=1\">First</a></li>\r\n        <li class=\"page-item\"> <a class=\"page-link\" href=\"?page={{ prod_list.previous_page_number }}\">Previous</a></li>\r\n       {% endif %}\r\n  {% if prod_list.number != 1  %}\r\n        <li class=\"page-item\"><a  class=\"page-link\" href=\"?page=1\">1</a></li>\r\n        <li class=\"page-item\"><a class=\"page-link\" href=\"?page=2\">2</a></li>\r\n        <li class=\"page-item\"><a class=\"page-link\" href=\"?page=3\">3</a></li>\r\n  {% endif %}\r\n    {% if prod_list.has_next %}\r\n        <li class=\"page-item\"><a class=\"page-link\" href=\"?page={{ prod_list.next_page_number }}\">Next page</a></li>\r\n        <li style=\"margin-bottom: 10px\" class=\"page-item\"> <a class=\"page-link\" href=\"?page={{ prod_list.paginator.num_pages }}\">Last page</a></li>\r\n    {% endif %}\r\n  </ul>\r\n</nav>\r\n\r\n        </section>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/base/templates/product.html b/base/templates/product.html
--- a/base/templates/product.html	(revision 2b045c5a13e65fdcbe6b817447d322a5a53756a8)
+++ b/base/templates/product.html	(date 1667250964109)
@@ -1,47 +1,47 @@
-
 {% load static %}
 
- <section class="product" id="Product">
-      <div style="height:70px;margin-top:20px;"></div>
-      <div class="container text-center header-transparent">
-        <h2>Our Product</h2>
-        <ul class="Itempicker">
-        <li class="list active PickCategory" data-filter="all">All</li>
-            {% for category in categories %}
-                <li class="list PickCategory" data-filter="{{ category.name }}">{{ category.name }}</li>
-            {% endfor %}
-        </ul>
-      </div>
-        <div style="display: flex;justify-content: center;align-items: center;flex-wrap: wrap;text-align: center">
-             {% for item in prod_list %}
-          <div class="card item" data-item="{{item.category.name}}">
-             <img src= {{ item.picture.url }} class="card-img-top" alt="Desk lamp">
-          <div class="card-body">
-            <h5 class="card-title">{{item.name}}</h5>
-            <p class="card-text">{{ item.small_description}}</p>
-            <a href="{% url "cart:cart_add" item.id %}" class="btn btn-warning price">Add to cart</a>
-            <a class="btn btn-primary">{{ item.price }}$</a>
-          </div>
-        </div>
-         {% endfor %}
-        </div>
+<section class="product" id="Product">
+  <div style="height:70px;margin-top:20px;"></div>
+  <div class="container text-center header-transparent">
+    <h2>Our Product</h2>
+    <ul class="Itempicker">
+      <li class="list active PickCategory" data-filter="all">All</li>
+      {% for category in categories %}
+      <li class="list PickCategory" data-filter="{{ category.name }}">{{ category.name }}</li>
+      {% endfor %}
+    </ul>
+  </div>
+  <div style="display: flex;justify-content: center;align-items: center;flex-wrap: wrap;text-align: center">
+    {% for item in prod_list %}
+    <div class="card item" data-item="{{item.category.name}}">
+      <img src={{ item.picture.url }} class="card-img-top" alt="Desk lamp">
+      <div class="card-body">
+        <h5 class="card-title">{{item.name}}</h5>
+        <p class="card-text">{{ item.small_description}}</p>
+        <a href="{% url "cart:cart_add" item.id %}" class="btn btn-warning price">Add to cart</a>
+        <a class="btn btn-primary">{{ item.price }}$</a>
+      </div>
+    </div>
+    {% endfor %}
+  </div>
 
-<nav aria-label="Page navigation example ">
-  <ul class="pagination">
-       {% if prod_list.has_previous %}
-           <li class="page-item"> <a class="page-link" href="?page=1">First</a></li>
-        <li class="page-item"> <a class="page-link" href="?page={{ prod_list.previous_page_number }}">Previous</a></li>
-       {% endif %}
-  {% if prod_list.number != 1  %}
-        <li class="page-item"><a  class="page-link" href="?page=1">1</a></li>
-        <li class="page-item"><a class="page-link" href="?page=2">2</a></li>
-        <li class="page-item"><a class="page-link" href="?page=3">3</a></li>
-  {% endif %}
-    {% if prod_list.has_next %}
-        <li class="page-item"><a class="page-link" href="?page={{ prod_list.next_page_number }}">Next page</a></li>
-        <li style="margin-bottom: 10px" class="page-item"> <a class="page-link" href="?page={{ prod_list.paginator.num_pages }}">Last page</a></li>
-    {% endif %}
-  </ul>
-</nav>
+  <nav aria-label="Page navigation example ">
+    <ul class="pagination">
+      {% if prod_list.has_previous %}
+      <li class="page-item"> <a class="page-link" href="?page=1">First</a></li>
+      <li class="page-item"> <a class="page-link" href="?page={{ prod_list.previous_page_number }}">Previous</a></li>
+      {% endif %}
+      {% if prod_list.number != 1 %}
+      <li class="page-item"><a class="page-link" href="?page=1">1</a></li>
+      <li class="page-item"><a class="page-link" href="?page=2">2</a></li>
+      <li class="page-item"><a class="page-link" href="?page=3">3</a></li>
+      {% endif %}
+      {% if prod_list.has_next %}
+      <li class="page-item"><a class="page-link" href="?page={{ prod_list.next_page_number }}">Next page</a></li>
+      <li style="margin-bottom: 10px" class="page-item"> <a class="page-link"
+          href="?page={{ prod_list.paginator.num_pages }}">Last page</a></li>
+      {% endif %}
+    </ul>
+  </nav>
 
-        </section>
+</section>
\ No newline at end of file
Index: account/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth import authenticate, login, logout\r\nfrom django.contrib.auth.models import User\r\nfrom django.shortcuts import render, redirect\r\nfrom .form import RegisterUser, UserLogin\r\nfrom django.contrib import messages\r\n\r\n\r\ndef register_view(request):\r\n    regist = RegisterUser(request.POST or None)\r\n    if User.objects.filter(username=request.POST.get(\"username\")).exists():\r\n        messages.error(request, \"User with that name already exists\")\r\n    if request.POST.get(\"password\") != request.POST.get(\"repeat_password\"):\r\n        messages.error(request, \"Password do not match\")\r\n    if regist.is_valid():\r\n        new_user = regist.save(commit=False)\r\n        new_user.set_password(regist.cleaned_data[\"password\"])\r\n        new_user.save()\r\n        login(request, new_user)\r\n        return redirect(\"/\")\r\n    return render(request,\"register.html\",context={\"regist\":regist})\r\n\r\ndef login_view(request):\r\n    form_login= UserLogin(request.POST or None)\r\n    next_get = request.GET.get(\"next\")\r\n    if form_login.is_valid():\r\n        username = request.POST.get(\"username\")\r\n        password = request.POST.get(\"password\")\r\n\r\n        user = authenticate(username=username, password=password)\r\n        if user is None:\r\n            messages.error(request, \"Invalid password or username\")\r\n        else:\r\n            login(request, user)\r\n            next_post = request.POST.get(\"next\")\r\n            return redirect(next_get or next_post or \"/\")\r\n    return render(request, \"login.html\", context={\"form\": form_login})\r\n\r\n\r\n\r\ndef logout_view(request):\r\n    logout(request)\r\n    return redirect(\"/\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/account/views.py b/account/views.py
--- a/account/views.py	(revision 2b045c5a13e65fdcbe6b817447d322a5a53756a8)
+++ b/account/views.py	(date 1667250964139)
@@ -17,10 +17,11 @@
         new_user.save()
         login(request, new_user)
         return redirect("/")
-    return render(request,"register.html",context={"regist":regist})
+    return render(request, "register.html", context={"regist": regist})
 
+
 def login_view(request):
-    form_login= UserLogin(request.POST or None)
+    form_login = UserLogin(request.POST or None)
     next_get = request.GET.get("next")
     if form_login.is_valid():
         username = request.POST.get("username")
@@ -36,7 +37,6 @@
     return render(request, "login.html", context={"form": form_login})
 
 
-
 def logout_view(request):
     logout(request)
-    return redirect("/")
\ No newline at end of file
+    return redirect("/")
Index: cart/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.core.mail import send_mail\r\n\r\nfrom django.shortcuts import get_object_or_404, redirect, render\r\nfrom django.views.decorators.http import require_GET\r\nfrom django.contrib.auth.decorators import login_required\r\n\r\nfrom Light.settings import EMAIL_HOST_USER\r\nfrom base.models import Product, SaleItem\r\n\r\nfrom .cart import Cart\r\nfrom .forms import OrderForm\r\nfrom .models import UserOrderForm\r\n\r\n\r\n@require_GET\r\ndef cart_add(request, product_id):\r\n    cart = Cart(request)\r\n    product = get_object_or_404(Product, id=product_id)\r\n    cart.add(product=product, quantity=1, update_quantity=False)\r\n    return redirect('cart:cart_detail')\r\n\r\n@require_GET\r\ndef cart_add_sale_item(request, sale_item_id,sale_item_slug):\r\n    cart = Cart(request)\r\n    sale_item = get_object_or_404(SaleItem,id=sale_item_id,slug=sale_item_slug)\r\n    cart.add_sale_item(sale_item=sale_item, quantity=1, update_quantity=False)\r\n    return redirect('cart:cart_detail')\r\n\r\ndef cart_remove_sale_item(request, sale_item_id,sale_item_slug):\r\n    cart = Cart(request)\r\n    sale_item = get_object_or_404(SaleItem, id=sale_item_id,slug=sale_item_slug)\r\n    cart.remove_sale_item(sale_item)\r\n    return redirect('cart:cart_detail')\r\n\r\ndef cart_remove(request, product_id):\r\n    cart = Cart(request)\r\n    product = get_object_or_404(Product, id=product_id)\r\n    cart.remove(product)\r\n    return redirect('cart:cart_detail')\r\n\r\ndef cart_delete(request):\r\n    cart = Cart(request)\r\n    cart.cart_del()\r\n    return redirect(\"/\")\r\n\r\n@login_required(login_url=\"account:login\")\r\ndef cart_detail(request):\r\n    cart = Cart(request)\r\n    form = OrderForm()\r\n    data = {\"cart\": cart, \"form\": form}\r\n    if request.method == \"POST\":\r\n        order_form = OrderForm(request.POST)\r\n        if order_form.is_valid():\r\n            order_detail = \"Your order is:\"\r\n            for elem in cart:\r\n                order_detail += f\" {elem.get('product')} - {elem.get('quantity')} \\n\"\r\n            order_str = f'Dear {order_form.cleaned_data[\"name\"]} thanks for order in our magazine.Our manager will contact you later' \\\r\n                        f'Detail:' \\\r\n                        f'{order_detail}.' \\\r\n                        f'Total to pay:{cart.get_total_price()}$\\n' \\\r\n                        f'With our love Light magazine \uD83D\uDE42 !'\r\n            UserOrderForm.objects.create(\r\n                name = order_form.cleaned_data.get(\"name\"),\r\n                phone = order_form.cleaned_data.get(\"phone\"),\r\n                order = f'We have a new order {order_detail[13:]},total price is {cart.get_total_price()}!'\r\n            )\r\n            for elem in cart:\r\n                if elem.get(\"slug\"):\r\n                    cart_remove_sale_item(request,elem.get(\"id\"),elem.get(\"slug\"))\r\n                else:\r\n                    cart_remove(request,elem.get(\"id\"))\r\n            send_mail(\"Success order in Light Magazine\",order_str,EMAIL_HOST_USER,[request.user.email],fail_silently=False)\r\n\r\n        return redirect(\"/\")\r\n\r\n    return render(request, 'cart_detail.html', context=data)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cart/views.py b/cart/views.py
--- a/cart/views.py	(revision 2b045c5a13e65fdcbe6b817447d322a5a53756a8)
+++ b/cart/views.py	(date 1667250964146)
@@ -19,30 +19,35 @@
     cart.add(product=product, quantity=1, update_quantity=False)
     return redirect('cart:cart_detail')
 
+
 @require_GET
-def cart_add_sale_item(request, sale_item_id,sale_item_slug):
+def cart_add_sale_item(request, sale_item_id, sale_item_slug):
     cart = Cart(request)
-    sale_item = get_object_or_404(SaleItem,id=sale_item_id,slug=sale_item_slug)
+    sale_item = get_object_or_404(SaleItem, id=sale_item_id, slug=sale_item_slug)
     cart.add_sale_item(sale_item=sale_item, quantity=1, update_quantity=False)
     return redirect('cart:cart_detail')
 
-def cart_remove_sale_item(request, sale_item_id,sale_item_slug):
+
+def cart_remove_sale_item(request, sale_item_id, sale_item_slug):
     cart = Cart(request)
-    sale_item = get_object_or_404(SaleItem, id=sale_item_id,slug=sale_item_slug)
+    sale_item = get_object_or_404(SaleItem, id=sale_item_id, slug=sale_item_slug)
     cart.remove_sale_item(sale_item)
     return redirect('cart:cart_detail')
 
+
 def cart_remove(request, product_id):
     cart = Cart(request)
     product = get_object_or_404(Product, id=product_id)
     cart.remove(product)
     return redirect('cart:cart_detail')
 
+
 def cart_delete(request):
     cart = Cart(request)
     cart.cart_del()
     return redirect("/")
 
+
 @login_required(login_url="account:login")
 def cart_detail(request):
     cart = Cart(request)
@@ -60,16 +65,17 @@
                         f'Total to pay:{cart.get_total_price()}$\n' \
                         f'With our love Light magazine 🙂 !'
             UserOrderForm.objects.create(
-                name = order_form.cleaned_data.get("name"),
-                phone = order_form.cleaned_data.get("phone"),
-                order = f'We have a new order {order_detail[13:]},total price is {cart.get_total_price()}!'
+                name=order_form.cleaned_data.get("name"),
+                phone=order_form.cleaned_data.get("phone"),
+                order=f'We have a new order {order_detail[13:]},total price is {cart.get_total_price()}!'
             )
             for elem in cart:
                 if elem.get("slug"):
-                    cart_remove_sale_item(request,elem.get("id"),elem.get("slug"))
+                    cart_remove_sale_item(request, elem.get("id"), elem.get("slug"))
                 else:
-                    cart_remove(request,elem.get("id"))
-            send_mail("Success order in Light Magazine",order_str,EMAIL_HOST_USER,[request.user.email],fail_silently=False)
+                    cart_remove(request, elem.get("id"))
+            send_mail("Success order in Light Magazine", order_str, EMAIL_HOST_USER, [request.user.email],
+                      fail_silently=False)
 
         return redirect("/")
 
Index: account/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\r\nfrom .views import login_view,register_view,logout_view\r\n\r\napp_name = \"account\"\r\n\r\nurlpatterns=[\r\n    path(\"login/\", login_view, name=\"login\"),\r\n    path(\"register/\", register_view, name=\"register\"),\r\n    path(\"logout/\", logout_view, name=\"logout\"),\r\n]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/account/urls.py b/account/urls.py
--- a/account/urls.py	(revision 2b045c5a13e65fdcbe6b817447d322a5a53756a8)
+++ b/account/urls.py	(date 1667250964153)
@@ -3,7 +3,7 @@
 
 app_name = "account"
 
-urlpatterns=[
+urlpatterns = [
     path("login/", login_view, name="login"),
     path("register/", register_view, name="register"),
     path("logout/", logout_view, name="logout"),
